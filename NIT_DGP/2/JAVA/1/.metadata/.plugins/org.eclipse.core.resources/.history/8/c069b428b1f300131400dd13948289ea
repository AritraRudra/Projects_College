import java.io.IOException;
import java.io.FileInputStream;
import java.util.Scanner;

public class StartHere {
	public static void main(String[] args) throws IOException{


		/*
		int generation_n = 512;	// Number of generations
		int popuSize = 512;		// Population size
		double xover_rate = 0.8;	// Crossover rate
		double mutate_rate = 0.01;	// Mutation rate
		//int bit_n = 8;			// Bit number for each input variable
		 */

		int i,j;
		int noOfNodes = 32;
		int popuSize = 1024;	// Population size
		int generationCount = 128;	// Number of generations
		
		/* GA parameters */
		//private static final double crossoverRate = 0.8;
		final double crossoverRate = 0.8;
		final double mutationRate = 0.08;
		final int tournamentSize = 5;
		final boolean elitism = true;	//save best two across generations

		int adjMat[][] = new int [noOfNodes][noOfNodes];
		int costMatDelay[][] = new int [noOfNodes][noOfNodes];
		int costMatEnrg[][] = new int [noOfNodes][noOfNodes];
		int actMatDelay[][] = new int [noOfNodes][noOfNodes];
		int actMatEnrg[][] = new int [noOfNodes][noOfNodes];
		double S[][] = new double [noOfNodes][noOfNodes];	//Proposed tuning parameter  can be set to local values for each node pair

		// first check to see if the program was run with the command line argument
		/*if(args.length < 1) {
	        System.out.println("Error, usage: java ClassName inputfile");
		System.exit(1);
	    }*/

		//Read the network information and store in adjacency matrix
		String netInfFile=new String("Network_Data.txt");
		Scanner netInfData = new Scanner(new FileInputStream(netInfFile));

		String costEnergyFile=new String("Energy_Cost_Data.txt");
		Scanner costEnergyData = new Scanner(new FileInputStream(costEnergyFile));

		String costDelayFile=new String("Delay_Cost_Data.txt");
		Scanner costDelayData = new Scanner(new FileInputStream(costDelayFile));

		/*String actEnergyFile=new String("Energy_Actual_Data.txt");
		Scanner actEnergyData = new Scanner(new FileInputStream(actEnergyFile));

		String actDelayFile=new String("Delay_Actual_Data.txt");
		Scanner actDelayData = new Scanner(new FileInputStream(actDelayFile));
		 */

		String tuningInfFile=new String("Tuning_Parameter.txt");
		Scanner tuningData = new Scanner(new FileInputStream(tuningInfFile));

		//netInfData.nextLine();	//Ignores the first line
		for (i = 0; i < noOfNodes; i++){
			for (j = 0; j < noOfNodes; j++){
				adjMat[i][j] = netInfData.nextInt();
				//System.out.print(adjMat[i][j] + " ");
			}
			//System.out.println();
			netInfData.nextLine();
		}

		//costEnergyData.nextLine();	//Ignores the first line
		for (i = 0; i < noOfNodes; i++){
			for (j = 0; j < noOfNodes; j++){
				costMatEnrg[i][j] = costEnergyData.nextInt();
			}
			costEnergyData.nextLine();
			//System.out.println(N_i + ", " + N_j + ", " + E_i + "," + D_i);
		}

		//costDelayData.nextLine();	//Ignores the first line
		for (i = 0; i < noOfNodes; i++){
			for (j = 0; j < noOfNodes; j++){
				costMatDelay[i][j] = costDelayData.nextInt();
				//System.out.print(costMatDelay[i][j] + " ");
			}
			//System.out.println();
			costDelayData.nextLine();
			//System.out.println(N_i + ", " + N_j + ", " + E_i + "," + D_i);
		}

		/*
		actEnergyData.nextLine();	//Ignores the first line
		for (i = 0; i < popuSize; i++){
			for (j = 0; j < popuSize; j++){
				actMatEnrg[i][j] = actEnergyData.nextInt();
			}
			actEnergyData.nextLine();
			//System.out.println(N_i + ", " + N_j + ", " + E_i + "," + D_i);
		}

		actDelayData.nextLine();	//Ignores the first line
		for (i = 0; i < popuSize; i++){
			for (j = 0; j < popuSize; j++){
				actMatDelay[i][j] = actDelayData.nextInt();
			}
			actDelayData.nextLine();
			//System.out.println(N_i + ", " + N_j + ", " + E_i + "," + D_i);
		}
		 */

		//tuningData.nextLine();	//Ignores the first line
		for (i = 0; i < noOfNodes; i++){
			for (j = 0; j < noOfNodes; j++){
				S[i][j] = tuningData.nextDouble();
			}
			tuningData.nextLine();
			//System.out.println(N_i + ", " + N_j + ", " + E_i + "," + D_i);
		}

		netInfData.close();
		costEnergyData.close();
		costDelayData.close();
		/*
		actEnergyData.close();
		actDelayData.close();
		 */
		tuningData.close();


		
		// Create an initial population
		/*Population myPop = new Population(popuSize, true);	//, adjMat,costMatDelay, costMatEnrg, S);
		mypop.setNetworkPropInPop(this.adjMat, this.costMatDelay, this.costMatEnrg, this.S);
		/*
		myPop.setAdjMat(adjMat);
		myPop.setCostMatDelay(costMatDelay);
		myPop.setCostMatEnrg(costMatEnrg);
		myPop.setS(S);
		*/

		// Set a candidate solution
		//FitnessCalc.setSolution("1111000000000000000000000000000000000000000000000000000000001111");

		// Evolve our population until we reach an optimum solution

		/*while (myPop.getFittest().getFitness() < FitnessCalc.getMaxFitness()) {
			generationCount++;
			System.out.println("Generation: " + generationCount + " Fittest: " + myPop.getFittest().getFitness());
			myPop = Algorithm.evolvePopulation(myPop);
		}
		System.out.println("Generation: " + i);
		*/
	}
	
	
	
	
	//Algorithm
	public Population evolvePopulation(Population pop) {
		int elitismOffset;	//no of elite chromosomes
		Population newPopulation = new Population(pop.getPopSize(), false);
		newPopulation.setAdjMat(pop.getAdjMat());
		newPopulation.setCostMatDelay(pop.getCostMatDelay());
		newPopulation.setCostMatEnrg(pop.getCostMatEnrg());
		newPopulation.setS(pop.getS());

		// Crossover population
		if (elitism) {
			elitismOffset = 128;
			//System.out.println(" hulla");
		} else {
			elitismOffset = 0;
		}

		// Keep our best individual
		if (elitism) {
			pop.sortByFitness(pop.getPopSize());
			//newPopulation.setIndividual(0, pop.getFittest());
			//newPopulation.setIndividual(1, pop.getSecondFittest());
			for(int i = 0; i < elitismOffset; i++){	//No of elite chromosomes for next gen				
				newPopulation.setIndividual(i, pop.getBySortedFitness(i));
				/*System.out.println(pop.getBySortedFitness(i).fitness + " #1");
				System.out.println(" hulla");*/
				System.out.println("Fitness : "+ pop.getBySortedFitness(i).getFitness());
				System.out.println( "String : " + pop.getBySortedFitness(i).getChromosomeString());
			}
			
		}



		// Loop over the population size and create new individuals with
		// crossover, select rest (except elites) and crossover in them
		for (int i = elitismOffset; i < pop.getPopSize(); i+=2) {
			Individual indiv1 = tournamentSelection(pop);
			Individual indiv2 = tournamentSelection(pop);
			if (Math.random() <= crossoverRate) {
				Individual newIndiv1 = crossover(indiv1, indiv2, true);	//false for first child i.e.,  [part of parent1][part of parent2]
				Individual newIndiv2 = crossover(indiv1, indiv2, false);		//true for first child i.e.,  [part of parent2][part of parent1]
				newPopulation.setIndividual(i, newIndiv1);
				newPopulation.setIndividual(i+1, newIndiv2);
			}else{
				newPopulation.setIndividual(i, indiv1);
				newPopulation.setIndividual(i+1, indiv2);
			}
		}

		// MUTATION (elites are not subject to this.)
		for (int i = elitismOffset; i < newPopulation.getPopSize(); i++) {
			if (Math.random() <= mutationRate)
				mutate(newPopulation.getIndividual(i));
		}
		return newPopulation;
	}
	
	
	
	
}